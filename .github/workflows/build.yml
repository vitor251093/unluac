name: Build and Release unluac

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
      date: ${{ steps.vars.outputs.date }}
      shorthash: ${{ steps.vars.outputs.shorthash }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Calculate version
      id: calculate_version
      run: |
        echo "version=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
    - name: Get date and git hash
      id: vars
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build-ubuntu:
    needs: get-info
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install Native Image
      run: gu install native-image
    - name: Build for Ubuntu
      run: |
        mkdir build
        javac -deprecation -Werror -d build -sourcepath src src/unluac/*.java
        mkdir bin
        jar -cfm bin/unluac.jar src/unluac/Manifest.mf -C build .
        native-image -jar bin/unluac.jar -H:Name=unluac -H:Class=unluac.Main
    - name: Upload Ubuntu artifact
      uses: actions/upload-artifact@v3
      with:
        name: unluac-${{ needs.get-info.outputs.version }}_linux-x64
        path: ./unluac

  build-windows:
    needs: get-info
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Add GraalVM to PATH
      run: |
        echo "${{ env.GRAALVM_HOME }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
      shell: pwsh
    - name: Install Native Image
      run: |
        & "${{ env.GRAALVM_HOME }}\bin\gu" install native-image
      shell: pwsh
    - name: Build for Windows
      run: |
        mkdir build
        javac -deprecation -Werror -d build -sourcepath src src/unluac/*.java
        mkdir bin
        jar -cfm bin/unluac.jar src/unluac/Manifest.mf -C build .
        native-image -jar bin/unluac.jar -H:Name=unluac -H:Class=unluac.Main -H:NativeLinkerOption="${{ github.workspace }}/res/recap_unluac.res"
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: unluac-${{ needs.get-info.outputs.version }}_win64
        path: ./unluac.exe

  create-release:
    needs: [get-info, build-windows, build-ubuntu]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v3
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    - name: Prepare release assets
      run: |
        cd artifacts
        for dir in */; do
          (cd "$dir" && zip -r "../${dir%/}.zip" .)
        done
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.get-info.outputs.version }}
        release_name: unluac v${{ needs.get-info.outputs.version }}
        draft: false
        prerelease: false
        body: |
          Release of unluac v${{ needs.get-info.outputs.version }}
          
          Date: ${{ needs.get-info.outputs.date }}
          Commit: ${{ needs.get-info.outputs.shorthash }}
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/unluac-${{ needs.get-info.outputs.version }}_win64.zip
        asset_name: unluac-${{ needs.get-info.outputs.version }}_win64.zip
        asset_content_type: application/zip
    - name: Upload Ubuntu Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/unluac-${{ needs.get-info.outputs.version }}_linux-x64.zip
        asset_name: unluac-${{ needs.get-info.outputs.version }}_linux-x64.zip
        asset_content_type: application/zip
